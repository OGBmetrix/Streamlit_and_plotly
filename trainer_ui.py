from pathlib import Path

import pandas as pd
import plotly.express as px
import streamlit as st

# Load the dataset

DATA_PATH = Path(r"C:\Users\USER\OneDrive\Documents\GitHub\trainer_ai\data\features.parquet")

st.set_page_config(
    page_title="Trainer Dashboard",
    page_icon="🏋️",
    layout="wide",
)

st.title("🏋️ Trainer / Coach Monitoring Dashboard")

if not DATA_PATH.exists():
    st.error(f"Data file not found: {DATA_PATH}\n" "Make sure features.parquet is generated by features.py")
    st.stop()

# Read parquet data
features = pd.read_parquet(DATA_PATH)

# Make sure key columns exist
required_cols = {"participant_id", "session_id", "window_end", "hr_mean", "label_binary"}
missing = required_cols - set(features.columns)
if missing:
    st.error(f"Missing required columns: {missing}")
    st.stop()


# Sidebar: Client selection

st.sidebar.header("Client Selection")
clients = sorted(features["participant_id"].dropna().unique())
if not clients:
    st.warning("No clients found in the data.")
    st.stop()

selected_client = st.sidebar.selectbox("Choose a client", clients)

# Filter data for selected client
client_data = features[features["participant_id"] == selected_client].copy()


# Fatigue Summary

st.subheader(f"Fatigue Summary – {selected_client}")

# Most recent fatigue value (could be NaN)
latest_fatigue = client_data.sort_values("window_end")["label_binary"].dropna().tail(1).values
fatigue_status = int(latest_fatigue[0]) if len(latest_fatigue) else None

if fatigue_status is None:
    st.info("No fatigue data available for this client.")
else:
    status_text = "High Risk ⚠️" if fatigue_status == 1 else "Normal ✅"
    st.metric("Current Fatigue Status", status_text)

# Aggregate HR mean and acute load
mean_hr = client_data["hr_mean"].mean()
mean_acute_load = client_data["acute_load_10m"].mean() if "acute_load_10m" in client_data else None

col1, col2 = st.columns(2)
col1.metric("Avg Heart Rate (bpm)", f"{mean_hr:.1f}")
if mean_acute_load is not None:
    col2.metric("Avg Acute Load (10m)", f"{mean_acute_load:.1f}")

st.markdown("---")


# Session Drill-Down

st.subheader("Session Details")

sessions = sorted(client_data["session_id"].dropna().unique())
if sessions:
    selected_session = st.selectbox("Select a session", sessions)
    session_data = client_data[client_data["session_id"] == selected_session].copy()

    # Line chart: HR over time
    if "window_end" in session_data and "hr_mean" in session_data:
        fig = px.line(
            session_data.sort_values("window_end"),
            x="window_end",
            y="hr_mean",
            title=f"Heart Rate Over Time – Session {selected_session}",
            labels={"window_end": "Time", "hr_mean": "Heart Rate (bpm)"},
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("No heart-rate data for this session.")

    # Additional metrics
    if "hr_z" in session_data:
        st.write(f"Average HR z-score for session: {session_data['hr_z'].mean():.2f}")

    # Recommended actions placeholder
    st.markdown("### 🩺 Recommended Actions")
    if fatigue_status == 1:
        st.warning(
            "Client shows signs of **high fatigue**.\n"
            "- Consider scheduling a recovery day.\n"
            "- Adjust training intensity.\n"
            "- Monitor hydration and sleep patterns."
        )
    else:
        st.success(
            "Client is within normal fatigue range.\n"
            "- Continue with planned training session.\n"
            "- Maintain regular monitoring."
        )
else:
    st.info("No sessions found for this client.")

st.markdown("---")
st.caption("Trainer Dashboard built with ❤️ using Streamlit and Plotly.")
